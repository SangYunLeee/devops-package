---
- name: Install Docker and Git
  hosts: all
  gather_facts: false

  tasks:
    - name: Check if apt is locked
      become: true
      shell: |
        if fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; then
          echo "locked"
        else
          echo "unlocked"
        fi
      register: apt_lock_status
      changed_when: false

    - name: Wait for automatic updates to finish
      become: true
      shell: |
        while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
          echo "Waiting for other apt process to finish..."
          sleep 10
        done
      when: apt_lock_status.stdout == "locked"
      changed_when: false

    - name: Clean apt cache
      become: true
      shell: |
        apt-get clean
        rm -rf /var/lib/apt/lists/*
        mkdir -p /var/lib/apt/lists/partial
      ignore_errors: true

    - name: Update apt cache with timeout
      become: true
      shell: |
        timeout 300 apt-get update || true
      register: apt_update_result
      changed_when: false

    - name: Install packages one by one
      become: true
      apt:
        name: "{{ item }}"
        state: present
        force_apt_get: yes
      loop:
        - git
        - docker.io
        - docker-compose
      retries: 2
      delay: 5
      ignore_errors: true

    - name: Alternative installation using shell
      become: true
      shell: |
        DEBIAN_FRONTEND=noninteractive apt-get install -y git docker.io docker-compose
      when: apt_update_result is failed
      ignore_errors: true

    - name: Start and enable Docker service
      become: true
      systemd:
        name: docker
        state: started
        enabled: yes
      ignore_errors: true

    - name: Add user to docker group
      become: true
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      when: ansible_user is defined
      ignore_errors: true

    - name: Verify installations
      shell: |
        echo "Git: $(git --version 2>/dev/null || echo 'Not installed')"
        echo "Docker: $(docker --version 2>/dev/null || echo 'Not installed')"
        echo "Docker Compose: $(docker-compose --version 2>/dev/null || echo 'Not installed')"
      register: installation_status
      changed_when: false

    - name: Show installation status
      debug:
        msg: "{{ installation_status.stdout_lines }}"